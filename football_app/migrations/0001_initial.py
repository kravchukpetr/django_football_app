# Generated by Django 4.2.24 on 2025-09-14 19:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(blank=True, help_text='ISO 2-letter country code', max_length=10, null=True)),
                ('flag_image', models.URLField(blank=True, help_text='URL to country flag image', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_major', models.BooleanField(default=False, help_text='Flag to identify major countries')),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('moderator', 'Moderator'), ('member', 'Member')], default='member', max_length=20)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('total_predictions', models.PositiveIntegerField(default=0)),
                ('correct_predictions', models.PositiveIntegerField(default=0)),
                ('exact_predictions', models.PositiveIntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-total_points', '-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('level', models.PositiveIntegerField(blank=True, default=2, help_text='League level (1 = top tier)', null=True)),
                ('type', models.CharField(blank=True, max_length=150, null=True)),
                ('logo_image', models.URLField(blank=True, help_text='URL to league logo', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leagues', to='football_app.country')),
            ],
            options={
                'ordering': ['country__name', 'level', 'name'],
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True)),
                ('code', models.CharField(blank=True, max_length=20)),
                ('national', models.BooleanField(default=False)),
                ('logo_image', models.URLField(blank=True, help_text='URL to team logo', null=True)),
                ('venue_id', models.PositiveIntegerField(blank=True, null=True)),
                ('venue_name', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_address', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_city', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('venue_surface', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_image', models.URLField(blank=True, help_text='URL to venue image', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='football_app.country')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('total_predictions', models.PositiveIntegerField(default=0)),
                ('correct_predictions', models.PositiveIntegerField(default=0)),
                ('avatar_image', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='football_app.team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('is_private', models.BooleanField(default=False, help_text='Private groups require invitation')),
                ('max_members', models.PositiveIntegerField(default=50, help_text='Maximum number of members')),
                ('join_code', models.CharField(blank=True, help_text='Code for users to join the group', max_length=20, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
                ('leagues', models.ManyToManyField(help_text='Leagues that this group predicts', related_name='prediction_groups', to='football_app.league')),
                ('members', models.ManyToManyField(related_name='joined_groups', through='football_app.GroupMembership', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., 2023/2024', max_length=100)),
                ('start_year', models.PositiveIntegerField(help_text='Starting year of the season')),
                ('end_year', models.PositiveIntegerField(blank=True, help_text='Ending year of the season', null=True)),
                ('start_date', models.DateField(blank=True, help_text='Season start date', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Season end date', null=True)),
                ('is_current', models.BooleanField(default=False, help_text='Is this the current active season?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this season available for predictions?')),
                ('coverage_fixtures_events', models.BooleanField(default=False, help_text='Coverage for fixtures events')),
                ('coverage_fixtures_lineups', models.BooleanField(default=False, help_text='Coverage for fixtures lineups')),
                ('coverage_fixtures_statistics_fixtures', models.BooleanField(default=False, help_text='Coverage for fixtures statistics')),
                ('coverage_fixtures_statistics_players', models.BooleanField(default=False, help_text='Coverage for player statistics')),
                ('coverage_standings', models.BooleanField(default=False, help_text='Coverage for standings')),
                ('coverage_players', models.BooleanField(default=False, help_text='Coverage for players')),
                ('coverage_top_scorers', models.BooleanField(default=False, help_text='Coverage for top scorers')),
                ('coverage_top_assists', models.BooleanField(default=False, help_text='Coverage for top assists')),
                ('coverage_top_cards', models.BooleanField(default=False, help_text='Coverage for top cards')),
                ('coverage_injuries', models.BooleanField(default=False, help_text='Coverage for injuries')),
                ('coverage_predictions', models.BooleanField(default=False, help_text='Coverage for predictions')),
                ('coverage_odds', models.BooleanField(default=False, help_text='Coverage for odds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='football_app.league')),
            ],
            options={
                'ordering': ['-start_year'],
                'unique_together': {('league', 'start_year', 'end_year')},
            },
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='football_app.usergroup'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Fixture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('referee', models.CharField(blank=True, max_length=100, null=True)),
                ('timezone', models.CharField(blank=True, max_length=20, null=True)),
                ('timestamp', models.PositiveIntegerField(blank=True, null=True)),
                ('venue_id', models.PositiveIntegerField(blank=True, null=True)),
                ('venue_name', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_city', models.CharField(blank=True, max_length=100, null=True)),
                ('status_long', models.CharField(blank=True, max_length=100, null=True)),
                ('status_short', models.CharField(blank=True, max_length=100, null=True)),
                ('status_elapsed', models.PositiveIntegerField(blank=True, null=True)),
                ('status_extra', models.CharField(blank=True, max_length=100, null=True)),
                ('league_external_id', models.PositiveIntegerField(blank=True, null=True)),
                ('round_type', models.CharField(blank=True, help_text='Type of round/gameweek', max_length=100, null=True)),
                ('round_number', models.PositiveIntegerField(blank=True, help_text='Match round/gameweek', null=True)),
                ('home_team_winner', models.BooleanField(default=True)),
                ('away_team_winner', models.BooleanField(default=True)),
                ('home_goals', models.PositiveIntegerField(blank=True, null=True)),
                ('away_goals', models.PositiveIntegerField(blank=True, null=True)),
                ('home_score_fulltime', models.PositiveIntegerField(blank=True, null=True)),
                ('away_score_fulltime', models.PositiveIntegerField(blank=True, null=True)),
                ('home_score_halftime', models.PositiveIntegerField(blank=True, null=True)),
                ('away_score_halftime', models.PositiveIntegerField(blank=True, null=True)),
                ('home_score_extratime', models.PositiveIntegerField(blank=True, null=True)),
                ('away_score_extratime', models.PositiveIntegerField(blank=True, null=True)),
                ('home_score_penalty', models.PositiveIntegerField(blank=True, null=True)),
                ('away_score_penalty', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_matches', to='football_app.team')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='football_app.country')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_matches', to='football_app.team')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='football_app.league')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='football_app.season')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('home_team', 'away_team', 'date', 'season')},
            },
        ),
        migrations.CreateModel(
            name='MatchPredict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('predicted_result', models.CharField(choices=[('H', 'Home Win'), ('D', 'Draw'), ('A', 'Away Win')], max_length=1)),
                ('predicted_home_score', models.PositiveIntegerField(blank=True, null=True)),
                ('predicted_away_score', models.PositiveIntegerField(blank=True, null=True)),
                ('confidence_level', models.PositiveIntegerField(default=50, help_text='Confidence level from 1-100')),
                ('points_earned', models.PositiveIntegerField(default=0, help_text='Points earned for this prediction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='football_app.fixture')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'match')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('user', 'group')},
        ),
        migrations.CreateModel(
            name='GroupInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('message', models.TextField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='football_app.usergroup')),
                ('invitee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_invitations', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('group', 'invitee')},
            },
        ),
    ]
